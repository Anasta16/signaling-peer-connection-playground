1. Someone must getUserMedia() = CLIENT1/Initiator/Caller/Offerer
2. CLIENT1 creates RTCPeerConnection
3. peerConnection needs STUN servers
    - we will need ICE candidates later
4. CLIENT1 adds local stream tracks to the peerConnection
    - we need to associate CLIENT1 feed with peerConnection
5. CLIENT1 creates an offer
    - needed a peerConnection with tracks
    - offer = RTCSessionDescription
        - RTCSessionDescription is 2 parts
            1. SDP = codec/resolution information
            2. Type (offer)
6. CLIENT1 hands the offer to peerConnection.setLocalDescription()
~ 7. ICE candidates can now start coming in (ASYNC process)
SIGNALING (someone to help the browsers find and talk to each other (socket.io server))
8. CLIENT1 emits the offer
    - socket.io server holds it for the other browser
    - associate with CLIENT1
~ 9. Once 7 happens, send emit ICE candidates up to signaling server
    - socket.io server holds it for the other browser
    - associate with CLIENT1
CLIENT and Signaling server wait
    - wait for an answerer (CLIENT2/receiver)
10. CLIENT2 loads up the webpage with io.connect()
    - new client is connected to signaling server
11. socket.io (socket.io and signaling server referred to interchangeably) emits out the RTC SessionDescription to new client
    - an offer to be sent
12. CLIENT2 runs getUserMedia()
13. CLIENT2 creates a peerConnection()
    - pass STUN servers
14. CLIENT2 adds localStream tracks to peerConnection
15. CLIENT2 creates an answer (createAnswer())
    - createAnswer = RTCSessionDescription (sdp/type)
16. CLIENT2 hands answer to peerConnection.setLocalDescription(answer)
17. because CLIENT2 has the offer, CLIENT2 can hand the offer to peerConnection.setRemoteDescription
~ 18. when setLocalDescription() runs, start collecting ICE candidates (ASYNC)
Signaling server has been waiting...
19. CLIENT2 emit answer (RTCSessionDescription - sdp/type) up to signaling server
~ 20. CLIENT2 will listen for tracks/ICE from remote
    - and CLIENT2 is now done
    - waiting on ICE candidates and waiting on tracks
21. Signaling server sends CLIENT1 answer (RTCSessionDescription - sdp/type) - type === "answer"
22. CLIENT1 takes the answer and hands it to peerConnection.setRemoteDescription()
~ 23. CLIENT1 waits for ICE candidates and tracks

--- 21 and 23 are waiting for ICE
    - once ICE is exchanged, tracks are exchanged